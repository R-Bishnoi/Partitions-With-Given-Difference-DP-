/************Partitions With Given Difference**************/

int solve(vector<int> &arr, vector<vector<int>>&dp ,int t,int i){
  
    // base cond..
    if(i==0){
        if(t==0 && arr[0]==0)return 2;
        else if(t==0 || arr[0]==t)return 1;
        else return 0;
    }
    
    // alredy stored value
  if(dp[i][t]!=-1)return dp[i][t];
    
    
    // take
    int take=0;
    if(t>=arr[i]){take=solve(arr,dp,t-arr[i],i-1); }
    
    //not take
    int not_take=solve(arr,dp,t,i-1);
    
  // return  
  return dp[i][t]=(take+not_take)%1000000007;
    
}


int countPartitions(int n, int d, vector<int> &arr) {
    //declaration
   int t=0;
 for(int i=0;i<n;i++){
     t=t+arr[i];
 } 
    
     if((t-d)%2!=0 || t-d<0)return 0; 
    // (t-d)/2 give us sum of first subset if we find all subset
    // which sum is equal to (t-d)/2 that ans is our all possible 
    // partition with given difference
    // here we can also use t=(t+d)/2 
    //s1+s2=sum
    //s1-s2=difference
     t=(t-d)/2;

    vector<vector<int>>dp(n,vector<int>(t+1,-1)); 
   return solve(arr,dp,t,n-1);   
      
      
}


